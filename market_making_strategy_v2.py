# -*- coding: utf-8 -*-
"""market_making_strategy_v2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1th2vIFMBsezDLRUKfMa4Bhdoawvwokbc
"""

from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

# Authenticate and create the PyDrive client.
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

import pandas as pd
import numpy as np
import datetime as dt
import timeit
import os.path

from google.colab import drive
drive.mount('/content/drive')





IH_dir = '/content/drive/My Drive/DL_Project/IH/'

front_month_map = {1: '1802', 2: '1803', 3: '1804', 4: '1805', 5: '1806', 6: '1807', 
           7: '1808', 8: '1809', 9: '1810', 10: '1811', 11: '1812', 12: '1901'}

Morning_Start = dt.timedelta(hours=9, minutes=30)
Morning_End = dt.timedelta(hours=11, minutes=30)
Afternoon_Start = dt.timedelta(hours=13)
Afternoon_End = dt.timedelta(hours=15)



def regularize(df, fill_last, fill_zero, reg_col = 'datetime', reg_str='0.5S'):
  df = df.set_index(reg_col)
  df = df.resample(reg_str).last()
  # ffill: propagate last valid observation forward to next valid
  df[fill_last] = df[fill_last].fillna(method='ffill')
  df[fill_zero] = df[fill_zero].fillna(0)
  return df

def add_features(df):
  
  # helper start:
  df['mid'] = 0.5*(df['bid1'] + df['ask1'])
  df['wmid'] = (df['bid1']*df['askv1'] + df['ask1']*df['bidv1']) / (df['askv1'] + df['bidv1'])
  
  df['prev_bid'] = df['bid1'].shift(1)
  df['prev_ask'] = df['ask1'].shift(1)

  df['ask_tick'] = 0 # ask order change
  # 1) ask was lifted to current level:
  df.loc[df['ask1'] > df['prev_ask'], 'ask_tick'] = -1
  # 2) approximation: assume all trades happened at previous ask 
  #   level if the most recent trade price was previous ask price
  df.loc[(df['prev_ask']==df['last']) & (df['volume']>0), 'ask_tick'] = \
      df.loc[(df['prev_ask']==df['last']) & (df['volume']>0), 'volume']
  

  df['bid_tick'] = 0 # bid order change
  # 1) bid was hit to current level:
  df.loc[df['bid1'] < df['prev_bid'], 'bid_tick'] = -1
  # 2) approximation: assume all trades happened at previous bid 
  #   level if the most recent trade price was previous bid price
  df.loc[(df['prev_bid']==df['last']) & (df['volume']>0), 'bid_tick'] = \
     df.loc[(df['prev_bid']==df['last']) & (df['volume']>0), 'volume']

  df['trade_dir'] = 0 # approximation of trade direction
  df.loc[((df['mid'] > df['mid'].shift(1)) | 
      (df['last'] >= df['ask1'].shift(1)) ) & (df['volume'] > 0), 'trade_dir'] = 1
  df.loc[((df['mid'] < df['mid'].shift(1)) | 
      (df['last'] <= df['bid1'].shift(1)) ) & (df['volume'] > 0), 'trade_dir'] = -1

  return df



# simple mm strategy, place bid and offer at same time
# if filled on one side (e.g. offer), stop placing 
# new order on that side (e.g. offer)

def add_trade_strategy(df):
  max_pos = 3
  pos = 0
  cash = 0.0
  action = 0

  bid_order = None # bid price, size ahead of it in the queue
  ask_order = None # ask price, size ahead of it in the queue

  # enter_price = np.nan
  df['pos'] = 0.0
  df['cash'] = 0.0
  df['action'] = 0

  for i in df.index:
    action = 0

    # Fill/cancel existing bid order if market moved
    if bid_order:
      # order filled in full:
      if ((df.loc[i, 'bid_tick'] < 0) or 
          (df.loc[i, 'bid_tick'] > bid_order[1])):
        pos += 1
        cash -= bid_order[0]
        action = 1
        bid_order = None 
      # order move forward in queue:
      elif df.loc[i, 'bid_tick'] > 0: 
        bid_order[1] -= df.loc[i, 'bid_tick']
      # bid ticked up, order is obsolete and canceled
      elif df.loc[i, 'bid1'] > bid_order[0]:
        bid_order = None

    # Fill/cancel existing ask order if market moved
    if ask_order:
      # order filled in full:
      if ((df.loc[i, 'ask_tick'] < 0) or 
          (df.loc[i, 'ask_tick'] > ask_order[1])):
        pos -= 1
        cash += ask_order[0]
        action = -1
        ask_order = None 
      # order move forward in queue:
      elif df.loc[i, 'ask_tick'] > 0: 
        ask_order[1] -= df.loc[i, 'ask_tick']
      # ask ticked down, order is obsolete and canceled
      elif df.loc[i, 'ask1'] < ask_order[0]:
        ask_order = None

    # place new order
    if not bid_order and pos < max_pos:
      bid_order = [df.loc[i, 'bid1'], df.loc[i, 'bidv1']] 
    if not ask_order and pos > -max_pos:
      ask_order = [df.loc[i, 'ask1'], df.loc[i, 'askv1']]

    df.loc[i, 'pos'] = pos
    df.loc[i, 'cash'] = cash
    df.loc[i, 'action'] = action
  
  # assume can offload positions at EOD for 0 transaction costs
  df['cum_pnl'] = df['pos'] * df['mid'] + df['cash'] 

  return df



def build_one_day_IH(df, morning_session_start, morning_session_end,
           afternoon_session_start, afternoon_session_end,
           pnl_dict):
  df.rename(columns = {' instrument': 'instrument',
                     ' datetime': 'datetime',
                     ' last': 'last',
                     ' opi': 'opi',
                     ' turnover': 'turnover',
                     ' volume': 'volume',
                     ' bid1': 'bid1',
                     ' ask1': 'ask1',
                     ' bidv1': 'bidv1',
                     ' askv1': 'askv1'}, inplace = True)
  
  df = df[['datetime', 'last', 'opi', 'turnover', 'volume', 'bid1', 'ask1', 'bidv1', 'askv1']]
  fill_last_cols = ['last', 'opi', 'bid1', 'ask1', 'bidv1', 'askv1']
  fill_zero_cols = ['turnover', 'volume']

  df['datetime'] = pd.to_datetime(df['datetime'])

  df_am = df[(df['datetime'] >= morning_session_start) & 
             (df['datetime'] <= morning_session_end)]
  df_pm = df[(df['datetime'] >= afternoon_session_start) & 
             (df['datetime'] <= afternoon_session_end)]
  
  # df_am = regularize(df_am, fill_last_cols, fill_zero_cols)
  # df_pm = regularize(df_pm, fill_last_cols, fill_zero_cols)
  # df_am = df_am.set_index('datetime')
  # df_pm = df_pm.set_index('datetime')
  
  df_am = add_features(df_am)
  df_pm = add_features(df_pm)

  df_am = add_trade_strategy(df_am)
  df_pm = add_trade_strategy(df_pm)
  
  pnl_dict['am'] = df_am['cum_pnl'].iloc[-1]
  pnl_dict['pm'] = df_pm['cum_pnl'].iloc[-1]

  # merge rows
  df = pd.concat([df_am, df_pm])
  return df



start_time = timeit.default_timer()

pnl_summary = {'date': [], 'am': [], 'pm': []}

prev_am_pnl = 0.0
prev_pm_pnl = 0.0
total_pnl = 0.0

for trade_date in pd.date_range('20180101', '20181231'):
  contract = 'IH' + front_month_map[trade_date.month] + '_' + trade_date.strftime('%Y%m%d')
  
  if not os.path.exists(IH_dir + contract + '.csv'):
    # print(IH_dir + contract + '.csv', ' not found')
    continue
  
  print('Processing', trade_date.date(), ' Contract:', contract,
     'Prev AM PnL', prev_am_pnl,
     'Prev PM PnL', prev_pm_pnl,
     'Prev Day PnL', prev_am_pnl + prev_pm_pnl,
      ' Total PnL:', total_pnl)
  
  IH = pd.read_csv(IH_dir + contract + '.csv')
  
  morning_start = trade_date + Morning_Start
  morning_end = trade_date + Morning_End
  afternoon_start = trade_date + Afternoon_Start
  afternoon_end = trade_date + Afternoon_End
  
  pnl_cur = {'am': 0.0, 'pm': 0.0}

  IH = build_one_day_IH(IH, morning_start, morning_end,
              afternoon_start, afternoon_end, pnl_cur)
  
  pnl_summary['date'].append(trade_date.date())
  pnl_summary['am'].append(pnl_cur['am'])
  pnl_summary['pm'].append(pnl_cur['pm'])

  prev_am_pnl = pnl_cur['am']
  prev_pm_pnl = pnl_cur['pm']
  total_pnl += (prev_am_pnl + prev_pm_pnl)

  # IH_dropna = IH.dropna()
  IH.to_csv('/content/drive/My Drive/DL_Project/mm_strategy_om/mm_backtest_' + 
            trade_date.strftime('%Y%m%d') + '.csv')

pnl_summary = pd.DataFrame.from_dict(pnl_summary)
pnl_summary['cum_pnl'] = pnl_summary['am'] + pnl_summary['pm']
pnl_summary.to_csv('/content/drive/My Drive/DL_Project/mm_strategy_om/pnl_summary.csv')
print('Time took: ', timeit.default_timer() - start_time)



# Turnover Analysis:
start_time = timeit.default_timer()

turnover_summary = {'date': [], 'turnover': []}

for trade_date in pd.date_range('20180101', '20181231'):
  contract = 'IH' + front_month_map[trade_date.month] + '_' + trade_date.strftime('%Y%m%d')
  
  if not os.path.exists(IH_dir + contract + '.csv'):
    # print(IH_dir + contract + '.csv', ' not found')
    continue
  
  IH = pd.read_csv('/content/drive/My Drive/DL_Project/mm_strategy_om/mm_backtest_' + 
            trade_date.strftime('%Y%m%d') + '.csv')
  
  tov = np.sum( np.abs(IH['action']) )
  turnover_summary['date'].append(trade_date.date())
  turnover_summary['turnover'].append(tov)
  print('Processed', trade_date.date(), 'Turnover:', tov, 
        ' Time took so far:', 
        timeit.default_timer() - start_time)

turnover_summary = pd.DataFrame.from_dict(turnover_summary)
turnover_summary.to_csv('/content/drive/My Drive/DL_Project/mm_strategy_om/turnover_summary.csv')
print('Time took: ', timeit.default_timer() - start_time)

